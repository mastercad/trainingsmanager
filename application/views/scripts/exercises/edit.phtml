<a name="right"></a>

<div class="row">
    <div class="col-sm-12 exercise-name">
        <h3>
            <?php echo $this->translate('label_exercise_name');?>:
        </h3>
        <input type="text"
               class="editable form-control"
               value="<?php echo $this->exercise_name;?>"
               id="exercise_name" data-cad-cms-content-orig="<?php echo base64_encode($this->exercise_name);?>" />
    </div>
</div>

<div class="row">
    <div class="col-sm-12 exercise-preview-picture">
        <?php echo $this->previewPictureContent;?>
    </div>
</div>

<div class="row">
    <div class="col-sm-12 exercise-type">
        <?php echo $this->exerciseTypeSelectContent;?>
    </div>
</div>

<div class="row">
    <div class="col-sm-12 exercise-description">
        <h3>
            <?php echo $this->translate('label_description');?>:
        </h3>

        <textarea class="editable form-control" rows="5"
             id="exercise_description"
             data-cad-cms-content-orig="<?php echo base64_encode($this->exercise_description);?>" ><?php echo $this->exercise_description;?></textarea>
    </div>
</div>

<div class="row">
    <div class="col-sm-12 exercise-special-features">
        <h3>
            <?php echo $this->translate('label_special_features');?>:
        </h3>

        <textarea class="editable form-control" rows="5"
            id="exercise_special_features"
            data-cad-cms-content-orig="<?php echo base64_encode($this->exercise_special_features);?>" ><?php echo $this->exercise_special_features;?></textarea>
    </div>
</div>

<div class="row">
    <div class="col-sm-12 exercise-device-select">
        <h3>
            <?php echo $this->translate('label_device');?>:
        </h3>
        <div class="form-group">
            <input type="text" class="form-control device-name"
                   id="exercise_device_name"
                   name="exercise_device_name"
                   value="<?php echo $this->device_name;?>"
                   data-exercise-device-name="<?php echo base64_encode($this->device_name);?>"
                   data-exercise-device-id="<?php echo $this->device_id;?>"
                   data-toggle="tooltip" data-placement="right" title="<?php echo $this->translate('tooltip_type_to_get_device_proposals');?>"
                />
        </div>
    </div>
</div>

<div class="row">
    <div class="col-sm-12 device-options-drop-down">
        <?php echo $this->deviceOptionsDropDownContent;?>
    </div>
</div>

<div class="row">
    <div class="col-sm-12 device-options exercise-selected-device-options">
        <?php echo $this->deviceOptionsContent;?>
    </div>
</div>

<div class="row">
    <div class="col-sm-12 exercise-options-drop-down">
        <?php echo $this->exerciseOptionsDropDownContent;?>
    </div>
</div>

<div class="row">
    <div class="col-sm-12 exercise-options">
        <?php echo $this->exerciseOptionsContent;?>
    </div>
</div>

<div class="row">
    <div class="col-sm-12 exercise-muscle-groups-input">
        <h3>
            <?php echo $this->translate('label_muscle_groups');?>:
        </h3>

        <div class="form-group">
            <input class="form-control muscle-group-name"
                   value=""
                   data-muscle-group-name=""
                   data-muscle-group-id=""
                   type="text"
                   data-toggle="tooltip" data-placement="right" title="<?php echo $this->translate('tooltip_type_to_get_muscle_or_muscle_group_proposals');?>"
                >
        </div>
    </div>
</div>

<!--    <img class="muscle-group-add" src="/images/content/statisch/grafiken/add_normal.png"-->
<!--         style="width: 30px; float: left; display: inline; margin-top: 15px;"/>-->

<div class="row">
    <div class="col-sm-12 exercise-muscle-groups">
        <?php echo $this->exerciseMuscleGroupsContent;?>
    </div>
</div>

<div class="row">
     <div class="col-sm-12 exercise-video">
        <h3>
            <?php echo $this->translate('label_exercise_video');?>:
        </h3>
    </div>
</div>
<!--    <div id="exercise_video"-->
<!--         style="margin-top: 5px;">-->
<!--    </div>-->

<input type="hidden" name="exercise-preview-picture" id="exercise_preview_picture" value="" />
<input type="hidden" class="id" name="exercise_id" id="exercise_id" value="<?php echo $this->exercise_id;?>" />
<input type="hidden" id="picture_path" value="<?php echo base64_encode($this->picturePath);?>" />
<input type="hidden" id="picture_temp_path" value="<?php echo base64_encode($this->pictureTempPath);?>" />
<input type="hidden" id="exercise_id" value="<?php echo $this->exercise_id;?>" />

<div class="proposals"
     style="position: absolute; left: -5000px; top: -5000px; padding: 10px;
            background-color: #FFFFFF; opacity: 0.9; box-shadow: 5px 5px 5px #111111;" ></div>

<div class="row">
    <div class="form-group">
        <button id="save" class="save button btn btn-primary btn-block">
            <?php echo $this->translate('label_save');?>
        </button>
    </div>
</div>

<div id="preview-template" style="display: none;">

    <div class="dz-preview dz-file-preview">
        <div class="dz-image"><img data-dz-thumbnail /></div>

        <div class="dz-details">
            <div class="dz-size"><span data-dz-size></span></div>
            <div class="dz-filename"><span data-dz-name></span></div>
        </div>
        <div class="dz-progress"><span class="dz-upload" data-dz-uploadprogress></span></div>
        <div class="dz-error-message"><span data-dz-errormessage></span></div>

        <div class="dz-success-mark">

            <svg width="54px" height="54px" viewBox="0 0 54 54" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:sketch="http://www.bohemiancoding.com/sketch/ns">
                <!-- Generator: Sketch 3.2.1 (9971) - http://www.bohemiancoding.com/sketch -->
                <title>Check</title>
                <desc>Created with Sketch.</desc>
                <defs></defs>
                <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd" sketch:type="MSPage">
                    <path d="M23.5,31.8431458 L17.5852419,25.9283877 C16.0248253,24.3679711 13.4910294,24.366835 11.9289322,25.9289322 C10.3700136,27.4878508 10.3665912,30.0234455 11.9283877,31.5852419 L20.4147581,40.0716123 C20.5133999,40.1702541 20.6159315,40.2626649 20.7218615,40.3488435 C22.2835669,41.8725651 24.794234,41.8626202 26.3461564,40.3106978 L43.3106978,23.3461564 C44.8771021,21.7797521 44.8758057,19.2483887 43.3137085,17.6862915 C41.7547899,16.1273729 39.2176035,16.1255422 37.6538436,17.6893022 L23.5,31.8431458 Z M27,53 C41.3594035,53 53,41.3594035 53,27 C53,12.6405965 41.3594035,1 27,1 C12.6405965,1 1,12.6405965 1,27 C1,41.3594035 12.6405965,53 27,53 Z" id="Oval-2" stroke-opacity="0.198794158" stroke="#747474" fill-opacity="0.816519475" fill="#FFFFFF" sketch:type="MSShapeGroup"></path>
                </g>
            </svg>

        </div>
        <div class="dz-error-mark">

            <svg width="54px" height="54px" viewBox="0 0 54 54" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:sketch="http://www.bohemiancoding.com/sketch/ns">
                <!-- Generator: Sketch 3.2.1 (9971) - http://www.bohemiancoding.com/sketch -->
                <title>error</title>
                <desc>Created with Sketch.</desc>
                <defs></defs>
                <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd" sketch:type="MSPage">
                    <g id="Check-+-Oval-2" sketch:type="MSLayerGroup" stroke="#747474" stroke-opacity="0.198794158" fill="#FFFFFF" fill-opacity="0.816519475">
                        <path d="M32.6568542,29 L38.3106978,23.3461564 C39.8771021,21.7797521 39.8758057,19.2483887 38.3137085,17.6862915 C36.7547899,16.1273729 34.2176035,16.1255422 32.6538436,17.6893022 L27,23.3431458 L21.3461564,17.6893022 C19.7823965,16.1255422 17.2452101,16.1273729 15.6862915,17.6862915 C14.1241943,19.2483887 14.1228979,21.7797521 15.6893022,23.3461564 L21.3431458,29 L15.6893022,34.6538436 C14.1228979,36.2202479 14.1241943,38.7516113 15.6862915,40.3137085 C17.2452101,41.8726271 19.7823965,41.8744578 21.3461564,40.3106978 L27,34.6568542 L32.6538436,40.3106978 C34.2176035,41.8744578 36.7547899,41.8726271 38.3137085,40.3137085 C39.8758057,38.7516113 39.8771021,36.2202479 38.3106978,34.6538436 L32.6568542,29 Z M27,53 C41.3594035,53 53,41.3594035 53,27 C53,12.6405965 41.3594035,1 27,1 C12.6405965,1 1,12.6405965 1,27 C1,41.3594035 12.6405965,53 27,53 Z" id="Oval-2" sketch:type="MSShapeGroup"></path>
                    </g>
                </g>
            </svg>

        </div>
<!--        <div><img src="removebutton.png" alt="Click me to remove the file." data-dz-remove /></div>-->
<!--        <div><span data-dz-remove> Click me to remove the file.</span></div>-->

    </div>
</div>

<!--<script type="text/javascript" src="/js/jquery.filedrop.js"></script>-->
<script type="text/javascript" src="/js/dropzone.js"></script>

<script type="text/javascript">

    jQuery(document).ready(function() {
        var dropzone = null;

        function save() {
            var hasErrors = false;
            var messages = [];
            var i = 0;
            var saveData = {};

            if (!jQuery.trim(jQuery('#exercise_name').val()).length) {
                hasErrors = true;
                messages.push({'type': 'fehler', 'message': '<?php echo $this->translate('tooltip_exercise_needs_name');?>'});
            }

            if (!jQuery.trim(jQuery('#exercise_description').html()).length) {
                hasErrors = true;
                messages.push({'type': 'fehler', 'message': 'Die Beschreibung der Ãœbung fehlt!'});
            }

            var currentMuscleGroups = jQuery('.exercise-muscle-groups').find('.muscle-group');
            var muscleGroups = [];

            // alle muskelgruppen durchlaufen
            for (i = 0, len = currentMuscleGroups.length; i < len; i++) {
                var muscles = [];
                var muscleGroupId = jQuery(currentMuscleGroups[i]).data('muscle-group-id');
                var currentMusclesInMuscleGroup = jQuery(currentMuscleGroups[i]).find('.muscle');

                for (var k = 0; k < currentMusclesInMuscleGroup.length; k++) {
                    var muscleId = jQuery(currentMusclesInMuscleGroup[k]).data('muscle-id');
                    var muscleUse = jQuery(currentMusclesInMuscleGroup[k]).find('.muscle-use').data('muscle-use');
                    if (muscleId) {
                        muscles.push({'id': muscleId, 'muscle_use': muscleUse});
                    }
                }
                if (muscleGroupId) {
                    muscleGroups.push({'id': muscleGroupId, 'muscles': muscles});
                }
            }

            if (!muscleGroups.length) {
                hasErrors = true;
                messages.push({'type': 'fehler', 'message': 'Es muss mindestens eine Muskelgruppe fÃ¼r diese Ãœbung vollstÃ¤ndig ausgefÃ¼llt sein!'});
            }

            var currentDeviceOptions = jQuery('.device-options').find('.device-option');
            var deviceOptions = [];

            for (i = 0, len = currentDeviceOptions.length; i < len; i++) {
                var deviceOptionValue = jQuery(currentDeviceOptions[i]).val();
                var deviceOptionId = jQuery(currentDeviceOptions[i]).data('device-option-id');
                var deviceXDeviceOptionId = jQuery(currentDeviceOptions[i]).data('device-x-device-option-id');
                var exerciseXDeviceOptionId = jQuery(currentDeviceOptions[i]).data('exercise-x-device-option-id');
                var trainingPlanXDeviceOptionId = jQuery(currentDeviceOptions[i]).data('training-plan-x-device-option-id');
                var trainingDiaryXDeviceOptionId = jQuery(currentDeviceOptions[i]).data('training-diary-x-device-option-id');

                if (deviceOptionId) {
                    deviceOptions.push({
                        deviceOptionId: deviceOptionId,
                        deviceXDeviceOptionId: deviceXDeviceOptionId,
                        exerciseXDeviceOptionId: exerciseXDeviceOptionId,
                        trainingPlanXDeviceOptionId: trainingPlanXDeviceOptionId,
                        trainingDiaryXDeviceOptionId: trainingDiaryXDeviceOptionId,
                        value: deviceOptionValue});
                }
            }

            var currentExerciseOptions = jQuery('.exercise-options').find('.exercise-option');
            var exerciseOptions = [];

            for (i = 0, len = currentExerciseOptions.length; i < len; i++) {
                var exerciseOptionValue = jQuery(currentExerciseOptions[i]).val();
                var exerciseOptionId = jQuery(currentExerciseOptions[i]).data('exercise-option-id');
                var exerciseXExerciseOptionId = jQuery(currentExerciseOptions[i]).data('exercise-x-exercise-option-id');
                var trainingDiaryXExerciseOptionId = jQuery(currentExerciseOptions[i]).data('training-diary-x-exercise-option-id');
                var trainingPlanXExerciseOptionId = jQuery(currentExerciseOptions[i]).data('training-plan-x-exercise-option-id');

                if (exerciseOptionId) {
                    exerciseOptions.push({
                        exerciseOptionId: exerciseOptionId,
                        exerciseXExerciseOptionId: exerciseXExerciseOptionId,
                        trainingPlanXExerciseOptionId: trainingPlanXExerciseOptionId,
                        trainingDiaryXExerciseOptionId: trainingDiaryXExerciseOptionId,
                        value: exerciseOptionValue});
                }
            }

            if (!hasErrors) {
                var typeSelect = jQuery('#right .exercise-type-select').attr('data-value');

                if (!typeSelect) {
                    typeSelect = jQuery(caller).next().find('.exercise-type-select').attr('data-value');
                }

                saveData.exercise_name = Base64.encode(jQuery('#exercise_name').val());
                saveData.exercise_description = Base64.encode(jQuery('#exercise_description').val());
                saveData.exercise_special_features = Base64.encode(jQuery('#exercise_special_features').val());
                saveData.exercise_muscle_groups = muscleGroups;
                saveData.exercise_preview_picture = Base64.encode(jQuery('#exercise_preview_picture').val());
                saveData.exercise_type_id = typeSelect;
                saveData.exercise_options = exerciseOptions;
                saveData.exercise_device_options = deviceOptions;
                saveData.exercise_id = jQuery('#exercise_id').val();
                saveData.exercise_device_fk = jQuery('#exercise_device_name').data('exercise-device-id');
                saveData.ajax = true;

                jQuery.post('/'+controller+'/save', saveData, function(response) {
                    var json = JSON.parse(response);

                    if (200 == json.state) {
                        showDialog(json.message, BootstrapDialog.TYPE_SUCCESS);
                    } else {
                        showDialog(json.message, BootstrapDialog.TYPE_DANGER);
                    }
                });
            } else {
                showDialog(messages, BootstrapDialog.TYPE_DANGER);
            }
        }

        jQuery('.dropdown.custom-drop-down .option-add').unbind('click').click(function() {
            var selectedOption = jQuery(this).data('value');
            var selectedOptionName = jQuery(this).html();
            var caretContent = '<span class="caret"></span>';

            jQuery(this).parent().parent().parent().attr('data-value', selectedOption);
            jQuery(this).parent().parent().parent().find('.dropdown-toggle').html(selectedOptionName + caretContent).dropdown('toggle');

            return false;
        });

        jQuery('.device-option-select .option-add').unbind('click').bind('click', function() {

            // check if selected option already exists
            var selectedOption = jQuery(this).data('value');
            var currentOptionsList = jQuery('.device-options').find('.device-option');

            for (var i = 0, len = currentOptionsList.length; i < len; i++) {
                var option_id = jQuery(currentOptionsList[i]).data('device-option-id');

                if (option_id == selectedOption) {
                    showDialog('<?php echo $this->translate('tooltip_selected_option_already_set');?>', BootstrapDialog.TYPE_DANGER);
                    jQuery(currentOptionsList[i]).effect('highlight', {}, 5000);
                    return false;
                }
            }

            jQuery(this).parent().parent().parent().find('.dropdown-toggle').dropdown('toggle');

            jQuery.post('/devices/get-device-option-edit', {ajax: true, device_option_id: selectedOption}, function(response) {
                var json = JSON.parse(response);

                if (200 == json.state) {
                    jQuery('.device-options').append(Base64.decode(json.htmlContent));
                    initOptions();
                } else {
                    showDialog(json.message, BootstrapDialog.TYPE_DANGER);
                }
            });
            return false;
        });

        jQuery('.exercise-option-select .option-add').unbind('click').bind('click', function () {

            // check if selected option already exists
            var selectedOption = jQuery(this).data('value');
            var currentOptionsList = jQuery('.exercise-options').find('.exercise-option');

            for (var i = 0, len = currentOptionsList.length; i < len; i++) {
                var option_id = jQuery(currentOptionsList[i]).data('exercise-option-id');

                if (option_id == selectedOption) {
                    showDialog('<?php echo $this->translate('tooltip_selected_option_already_set');?>', BootstrapDialog.TYPE_DANGER);
                    jQuery(currentOptionsList[i]).effect('highlight', {}, 5000);
                    return false;
                }
            }

            jQuery(this).parent().parent().parent().find('.dropdown-toggle').dropdown('toggle');

            jQuery.post('/exercises/get-exercise-option-edit', {
                ajax: true,
                exercise_option_id: selectedOption,
                exercise_id: jQuery('#exercise_id').val()
            }, function (response) {
                var json = JSON.parse(response);

                if (200 == json.state) {
                    jQuery('.exercise-options').append(Base64.decode(json.htmlContent));
                    initOptions();
                } else {
                    showDialog(json.message, BootstrapDialog.TYPE_DANGER);
                }
            });
            return false;
        });

        jQuery('.muscle-group-name').each(function() {
            var post_request = null;

            jQuery(this).unbind('keyup').on('keyup', function (e) {
                var url = '/muscle-groups/get-muscle-group-proposals/';
                var search = Base64.encode(jQuery(this).val());
                var self = jQuery(this);

                jQuery(self).css('background-color', 'red');
                jQuery(self).data('muscle-group-name', '');
                jQuery(self).data('muscle-group-id', '');

                if (null !== post_request) {
                    post_request.abort();
                }

                post_request = jQuery.ajax({
                    type: "POST",
                    url: url,
                    data: "search=" + search + "&ajax=true",
                    success: function (response) {
                        var offset = jQuery(self).offset();
                        jQuery('body').append(jQuery('.proposals'));

                        var json = JSON.parse(response);

                        if (200 == json.state) {
                            jQuery('.proposals').html(Base64.decode(json.htmlContent))
                                .css('left', offset.left + "px")
                                .css('top', offset.top + 40 + "px");
                        } else {
                            showDialog(json.message, BootstrapDialog.TYPE_DANGER);
                        }

                        jQuery('.proposals').find('.proposal').unbind('click').bind('click', function () {
                            // check ob diese muskelgruppe bereits gesetzt wurde
                            var vorhandene_muskelgruppen = jQuery('.exercise-muscle-groups').find('.muscle-group');

                            for (var i = 0, len = vorhandene_muskelgruppen.length; i < len; i++) {
                                if (jQuery(vorhandene_muskelgruppen[i]).data('muscle-group-id') == jQuery(this).data('proposal-id')) {
                                    showDialog('Diese Muskelgruppe ist bereits gesetzt!', BootstrapDialog.TYPE_DANGER);
                                    return false;
                                }
                            }

                            addMuscleGroup(jQuery(this).data('proposal-id'), jQuery('#exercise_id').val());
                            jQuery('.proposals').fadeOut();
                            return false;
                        });
                        jQuery('.proposals').fadeIn();
                    }
                });
            });
        });

        function addMuscleGroup(muscleGroupId, exerciseId) {
            jQuery.ajax({
                type: "POST",
                url: '/exercises/get-muscle-group-for-exercise-edit/',
                data: "muscle_group_id=" + muscleGroupId + "&exercise_id=" + exerciseId + "&ajax=true",
                success: function (response) {
                    var json = JSON.parse(response);

                    if (200 == json.state) {
                        jQuery('.exercise-muscle-groups').append(Base64.decode(json.htmlContent));
                        initMuscleRating();
                        initMuscleGroups();
                    } else {
                        showDialog(json.message, BootstrapDialog.TYPE_DANGER);
                    }
                }
            });
        }

        function initMuscleRating() {
            jQuery('.exercise-muscle-groups').find('.muscle-use').unbind('mouseover').unbind('mouseout').unbind('click').hover(
                function() {
                    var x = null;
                    jQuery(this).unbind('mousemove').mousemove(function (e) {
                        if (!jQuery(this).parent().parent().hasClass('deactivated')) {
                            var parentOffset = jQuery(this).parent().offset();
                            x = -100 + ( parseFloat(e.pageX) - parentOffset.left);
                            x = Math.round(x / 20) * 20;
                            jQuery(this).css('background-position', x + "px " + x + "px");
                        }
                    });

                    jQuery(this).unbind('click').click(function () {
                        if (!jQuery(this).parent().parent().hasClass('deactivated')) {
                            jQuery(this).data('background-position', x + "px " + x + "px");
                            jQuery(this).data('muscle-use', Math.round(5 + (x / 20)));
                            jQuery(this).css('background-position', jQuery(this).data('background-position'));
                            jQuery(this).attr('title', Math.round(5 + (x / 20)));
                        }
                    });
                },
                function() {
                    if (!jQuery(this).parent().parent().hasClass('deactivated')) {
                        if (undefined !== jQuery(this).data('background-position')) {
                            jQuery(this).css('background-position', jQuery(this).data('background-position'));
                        } else {
                            jQuery(this).css('background-position', '-100px 0');
                        }
                    }
                }
            );

            jQuery('.muscle-delete').unbind('click').click(function () {
                if (jQuery(this).parent().hasClass('deactivated')) {
                    jQuery(this).parent().find('.muscle-use').css('background-position', jQuery(this).parent().find('.muscle-use').data('background-position'))
                        .data('muscle-use', jQuery(this).parent().find('.muscle-use').attr('data-muscle-use-before-delete'))
                        .attr('data-muscle-use-before-delete', 0);
                    jQuery(this).parent().removeClass('deactivated');
                } else {
                    jQuery(this).parent().find('.muscle-use')
                        .css('background-position', '-100px -100px')
                        .attr('data-muscle-use-before-delete', jQuery(this).parent().find('.muscle-use').data('muscle-use'))
                        .data('muscle-use', 0)
                        .parent().parent().addClass('deactivated');
                }
            });
        }

        function initOptions() {
            jQuery('.option-delete').unbind('click').click(function () {
                var currentOption = jQuery(this).parent().find('.option');

                if (jQuery(this).parent().hasClass('deactivated')) {
                    currentOption.val(currentOption.attr('data-value-before-delete'))
                        .attr('data-value-before-delete', 0)
                        .prop('disabled', false)
                        .parent().removeClass('deactivated');
                    jQuery(this).removeClass('glyphicon-refresh')
                        .addClass('glyphicon-trash');
                } else {
                    currentOption.attr('data-value-before-delete', currentOption.val())
                        .val(null)
                        .prop('disabled', true)
                        .parent().addClass('deactivated');
                    jQuery(this).removeClass('glyphicon-trash')
                        .addClass('glyphicon-refresh');
                }
            });
        }

        function initMuscleGroups() {
            jQuery('.muscle-group-delete').unbind('click').click(function () {
                jQuery(this).parent().data('muscle-group-id', null).fadeOut();
            });
        }

        initMuscleRating();
        initMuscleGroups();
        initOptions();
        initPreviewThumbRemove();

        function initDropZone() {
            dropzone = new Dropzone('#upload', {
                url: '/' + controller + '/upload-picture',
                previewTemplate: document.querySelector('#preview-template').innerHTML,
                parallelUploads: 2,
                thumbnailHeight: 120,
                thumbnailWidth: 120,
                maxFilesize: 3,
                filesizeBase: 1000,
                previewsContainer: '#dropzone_previews',
                addRemoveLinks: true,
                thumbnail: function (file, dataUrl) {
                    if (file.previewElement) {
                        file.previewElement.classList.remove("dz-file-preview");
                        var images = file.previewElement.querySelectorAll("[data-dz-thumbnail]");
                        for (var i = 0; i < images.length; i++) {
                            var thumbnailElement = images[i];
                            thumbnailElement.alt = file.name;
                            thumbnailElement.src = dataUrl;
                        }
                        setTimeout(function () {
                            file.previewElement.classList.add("dz-image-preview");
                        }, 1);
                    }
                },
                init: function () {
                    this.on("success", function (file, response) {
                        var files = JSON.parse(response);
                        file.serverId = files[0].id;
                        jQuery(file.previewElement).find('.dz-details').data('source-path', files[0].paths.html_pfad)
                            .unbind('click')
                            .click(function () {
                                refreshPreviewPicture(jQuery(this));
                            }
                        );
                    });
                    this.on("removedfile", function (file) {
                        // The file hasn't been uploaded
                        if (!file.serverId) {
                            return;
                        }
                        jQuery.ajax({
                            url: "/" + controller + "/delete-picture/",
                            data: {
                                id: Base64.encode(file.serverId),
                                exerciseId: jQuery('#exercise_id').val(),
                                ajax: true
                            },
                            type: 'POST',
                            success: function (response) {
                                var json = JSON.parse(response);

                                if (200 == json.state) {
                                    showDialog(json.message, BootstrapDialog.TYPE_SUCCESS);
                                } else {
                                    showDialog(json.message, BootstrapDialog.TYPE_DANGER);
                                }
                            },
                            error: function (data) {
                                showDialog(data, BootstrapDialog.TYPE_DANGER);
                            }
                        });
                    });
                    jQuery(".dz-details").on("click", function (e) {
                        refreshPreviewPicture(jQuery(this));
                    });
                }
            });
        }

        function initPreviewThumbRemove() {
            jQuery(".dz-remove").unbind('click').click(function (e) {
                e.preventDefault();
                e.stopPropagation();

                var imageId = jQuery(this).parent().find(".dz-filename > span").text();
                var that = this;
                jQuery.ajax({
                    url: "/" + controller + "/delete-picture/",
                    data: {
                        id: Base64.encode(imageId),
                        exerciseId: jQuery('#exercise_id').val(),
                        ajax: true
                    },
                    type: 'POST',
                    success: function (response) {
                        var json = JSON.parse(response);

                        if (200 == json.state) {
                            showDialog(json.message, BootstrapDialog.TYPE_SUCCESS);
                            jQuery(that).parent().parent().fadeOut(500, function () {
                                jQuery(that).parent().parent().remove();
                            });
                        } else {
                            showDialog(json.message, BootstrapDialog.TYPE_DANGER);
                        }
                    },
                    error: function (data) {
                        showDialog(data, BootstrapDialog.TYPE_DANGER);
                    }
                });
            });
        }

        var currentPreview = null;

        function initCameraApi() {
            var picUploadWrapper = jQuery('<div style="width: 0; height: 0; overflow: hidden;"></div>');
            var picUpload = jQuery('<input type="file" id="picture_files" name="picture-files" accept="images/*" multiple style="visibility: hidden;" />');
            var uploadTemplate = jQuery('#preview-template');

            picUpload.change(function() {
                uploadFiles(this.files);
            });

            jQuery('#dropzone_previews .dz-details').unbind('click').click(function (e) {
                refreshPreviewPicture(jQuery(this));
            });

            jQuery(picUploadWrapper).append(picUpload);
            jQuery('#upload.dropzone').append(picUploadWrapper)
                .find('.dz-message').unbind('click').click(function() {
                picUpload.click();
            });

            function uploadFiles(files) {

                var fd = new FormData();
                for (var index = 0; index < files.length; index ++){
                    var file = files[index];
                    fd.append(file.name, file);
                }

                fd.append('ajax', true);

                jQuery.ajax({
                    xhr: function() {
                        var xhr = new window.XMLHttpRequest();

                        // Upload progress
                        xhr.upload.addEventListener("progress", function(evt){
                            if (evt.lengthComputable) {
                                var percentComplete = (evt.loaded / evt.total) * 100;
                                jQuery(currentPreview).find('div.dz-progress span.dz-upload').css('width', percentComplete + "%");
                                //Do something with upload progress
//                                console.log("Upload : " + percentComplete);
                            }
                        }, false);

                        // Download progress
                        xhr.addEventListener("progress", function(evt){
                            if (evt.lengthComputable) {
                                var percentComplete = (evt.loaded / evt.total) * 100;
                                // Do something with download progress
                                console.log("Download : " + percentComplete);
                            }
                        }, false);

                        return xhr;
                    },
                    url: '/'+controller+'/upload-picture',
                    data: fd,
                    type: 'POST',
                    processData: false,
                    contentType: false,
                    beforeSend: function(xhr) {
                        xhr.overrideMimeType( "text/plain; charset=x-user-defined" );
                        createPreviewPicture(files);

                    },
                    success: function (response) {
                        var json = JSON.parse(response);
                        if (200 == json.state) {
                            try {
                                var files = JSON.parse(Base64.decode(json.htmlContent));
                                jQuery('form.dropzone').css('background-image', 'url("' + files[0].paths.html_pfad + '")');
                                considerDropZoneBackgroundDimensions();
                                jQuery(currentPreview).find('div.dz-progress').css('display', 'none');
                            } catch (exception) {
                                showDialog(exception, BootstrapDialog.TYPE_DANGER);
                            }
                        } else {
                            showDialog(json.message, BootstrapDialog.TYPE_DANGER);
                        }
                    },
                    error: function (data) {
                        showDialog(data, BootstrapDialog.TYPE_DANGER);
                    }
                });
            }
        }

        function createPreviewPicture(files) {
            if (files
                && files[0]
            ) {
                var reader = new FileReader();
                reader.onload = function (e) {
                    console.log(files[0]);
                    currentPreview = jQuery('#preview-template').clone();
                    currentPreview.addClass('dz-preview').css('display', 'inline-block').removeAttr('id');
                    var removeLink = jQuery('<a href="#" class="dz-remove">Remove</a>');
                    jQuery(currentPreview).find('.dz-preview').append(removeLink);
                    jQuery(currentPreview).find('.dz-details').attr('data-source-path', e.target.result);
                    jQuery(currentPreview).find('.dz-image img').attr('src',  e.target.result);
                    jQuery(currentPreview).find('.dz-filename span').html(files[0].name);
                    jQuery(currentPreview).find(".dz-details").on("click", function (e) {
                        refreshPreviewPicture(jQuery(this));
                    });

                    jQuery('#dropzone_previews').append(currentPreview);
                    initPreviewThumbRemove();
                };

                reader.readAsDataURL(files[0]);
            }
        }

        function initUploadTarget() {
            if (jQuery('#mobile').is(':visible')) {
                initCameraApi();
            } else {
                considerDropZoneBackgroundDimensions();

                jQuery(window).resize(function() {
                    considerDropZoneBackgroundDimensions();
                });

                if (!dropzone) {
                    initDropZone();
                }
            }
        }

        function refreshPreviewPicture(element) {
            jQuery('#upload').css('background-image', 'url('+jQuery(element).data('source-path')+')');
            jQuery('.dz-details').data('current-picture', false).removeClass('active-preview-picture');
            jQuery(element).data('current-picture', true).addClass('active-preview-picture');
            considerDropZoneBackgroundDimensions();
        }

        function considerDropZoneBackgroundDimensions() {

            var url = jQuery('#upload').css('background-image').replace('url(', '').replace(')', '').replace("'", '').replace('"', '').replace('"', '');
            var dropZoneWidth = jQuery('#upload').outerWidth();
            var dropZoneHeight = jQuery('#upload').outerHeight();
            var newCreated = false;

            var bgImg = jQuery('#load_dummy');
            if (0 == bgImg.length) {
                newCreated = true;
                bgImg = jQuery('<img id="load_dummy" />');
            }
            bgImg.hide();
            bgImg.bind('load', function() {
                var height = jQuery(this).height();
                var width = jQuery(this).width();
                var ratio = dropZoneWidth / width;
                var newHeight = height * ratio;
                jQuery('#upload').css('background-size', parseInt(dropZoneWidth) + 'px ' + parseInt(newHeight) + 'px')
                    .height(newHeight);

                if (!isMobile) {
                    jQuery('#dropzone_previews').height(newHeight);
                } else {
                    jQuery('#dropzone_previews').css('height', 'auto');
                }
            });
            if (newCreated) {
                jQuery('#upload').append(bgImg);
            }
            jQuery('#exercise_preview_picture').val(url);
            bgImg.attr('src', url);
        }

        initUploadTarget();
        considerDropZoneBackgroundDimensions();

        jQuery('#save').unbind('click').click(function() {
            save();
        });
    });
</script>
